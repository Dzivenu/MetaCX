import {
  pgTable,
  text,
  timestamp,
  real,
  boolean,
  integer,
  decimal,
  index,
  unique,
} from "drizzle-orm/pg-core";

export const currency = pgTable(
  "currencies",
  {
    id: text("id").primaryKey(),
    name: text("name"),
    ticker: text("ticker"),
    rate: real("rate").default(1.0),
    buyMarginMax: real("buy_margin_max").default(1.0),
    sellMarginMax: real("sell_margin_max").default(1.0),
    sellMarginMin: real("sell_margin_min"),
    tradeable: boolean("tradeable"),
    updateAt: timestamp("update_at"),
    sign: text("sign"),
    photo: text("photo"),
    createdAt: timestamp("created_at")
      .notNull()
      .$defaultFn(() => new Date()),
    updatedAt: timestamp("updated_at")
      .notNull()
      .$defaultFn(() => new Date()),
    buyMarginMin: real("buy_margin_min"),
    typeOf: text("type_of"),
    floatDisplayOrder: integer("float_display_order").default(0).notNull(),
    fxReservePool: real("fx_reserve_pool").default(0.0).notNull(),
    fxReserveWeight: real("fx_reserve_weight").default(0.0).notNull(),
    icon: text("icon"),
    sellMarginTarget: decimal("sell_margin_target").default("0.0"),
    buyMarginTarget: decimal("buy_margin_target").default("0.0"),
    displayWeightWeb: decimal("display_weight_web").default("0.0"),
    displayWeightFloat: decimal("display_weight_float").default("0.0"),
    source: text("source"),
    floatThresholdBottom: real("float_threshold_bottom").default(0.0),
    floatThresholdTop: real("float_threshold_top").default(0.0),
    isBaseCurrency: boolean("is_base_currency").default(false).notNull(),
    fxReserveHardcostPool: real("fx_reserve_hardcost_pool").default(0.0),
    sellMarginAtm: real("sell_margin_atm"),
    buyMarginAtm: real("buy_margin_atm"),
    hexColor: text("hex_color").default("#D3D3D3"),
    spread: real("spread").default(1.0),
    offset: real("offset").default(1.0),
    weBuy: real("we_buy").default(1.0),
    weSell: real("we_sell").default(1.0),
    floatTargetPercent: real("float_target_percent").default(0.0),
    floatTargetInBaseCurrency: real("float_target_in_base_currency").default(
      0.0
    ),
    floatThresholdElasticity: real("float_threshold_elasticity").default(0.01),
    organizationId: text("organization_id"),
    rateDecimalPlaces: integer("rate_decimal_places").default(2),
    amountDecimalPlaces: integer("amount_decimal_places").default(2),
    offsetPremium: real("offset_premium").default(0.0),
    rateApi: text("rate_api").default(""),
    api: integer("api").default(0),
    network: text("network"),
    chainId: text("chain_id"),
    symbol: text("symbol"),
    contract: text("contract"),
    underlying: text("underlying"),
    rateApiIdentifier: text("rate_api_identifier").notNull(),
    rateUpdatedAt: timestamp("rate_updated_at").notNull(),
    advertisable: boolean("advertisable").default(true).notNull(),
    buyAdvertisable: boolean("buy_advertisable").default(true),
    sellAdvertisable: boolean("sell_advertisable").default(true),
  },
  (table) => ({
    organizationIdIdx: index("index_currencies_on_branch_id").on(
      table.organizationId
    ),
    nameIdx: unique("index_currencies_on_name").on(table.name),
    tickerIdx: unique("index_currencies_on_ticker").on(table.ticker),
    typeOfIdx: index("index_currencies_on_typeof").on(table.typeOf),
  })
);
